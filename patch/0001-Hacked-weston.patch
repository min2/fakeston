From d568d622da3f3e303d15eb0d4c765ceccc30db5c Mon Sep 17 00:00:00 2001
From: Martin Minarik <minarik11@student.fiit.stuba.sk>
Date: Fri, 17 May 2013 17:35:17 +0200
Subject: [PATCH] Hacked weston

This hacked weston produces EVEMU captures, they appear
in /tmp/

It also produces FAKESTON testcases.

Captures the ioctls.
Records ordering of event bursts.
Logs evdev device create/destroy.

Applies to weston 7b9195f9d6
---
 src/evdev-touchpad.c |    1 +
 src/evdev.c          |  320 +++++++++++++++++++++++++++++++++++++++++++++++++-
 src/evdev.h          |   13 ++
 3 files changed, 332 insertions(+), 2 deletions(-)

diff --git a/src/evdev-touchpad.c b/src/evdev-touchpad.c
index 4f9bb03..c889845 100644
--- a/src/evdev-touchpad.c
+++ b/src/evdev-touchpad.c
@@ -692,6 +692,7 @@ touchpad_init(struct touchpad_dispatch *touchpad,
 	ioctl(device->fd, EVIOCGBIT(EV_ABS, sizeof(abs_bits)), abs_bits);
 	if (TEST_BIT(abs_bits, ABS_PRESSURE)) {
 		ioctl(device->fd, EVIOCGABS(ABS_PRESSURE), &absinfo);
+		ioctl_dump_char(device, "eviocg_abs_pressure", (char *) &absinfo, sizeof(absinfo));
 		configure_touchpad_pressure(touchpad,
 					    absinfo.minimum,
 					    absinfo.maximum);
diff --git a/src/evdev.c b/src/evdev.c
index d8dd6d1..ab0c121 100644
--- a/src/evdev.c
+++ b/src/evdev.c
@@ -26,7 +26,9 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <mtdev.h>
+#include <errno.h>
 
+#include "evemu-impl.h"
 #include "compositor.h"
 #include "evdev.h"
 
@@ -60,6 +62,25 @@ evdev_led_update(struct evdev_device *device, enum weston_led leds)
 	(void)i; /* no, we really don't care about the return value */
 }
 
+struct evdev_dispatch_interface fallback_interface;
+struct evdev_dispatch_interface syn_drop_interface;
+
+static inline void
+evdev_process_syn(struct evdev_device *device, struct input_event *e, int time)
+{
+	switch (e->code) {
+	case SYN_DROPPED:
+		if (device->dispatch->interface == &fallback_interface)
+			device->dispatch->interface = &syn_drop_interface;
+		weston_log("warning: evdev: Syn drop at %u on %s \n", time, device->devname);
+		break;
+	case SYN_REPORT:
+	default:
+		device->pending_events |= EVDEV_SYN;
+		break;
+	}
+}
+
 static inline void
 evdev_process_key(struct evdev_device *device, struct input_event *e, int time)
 {
@@ -204,7 +225,13 @@ evdev_process_absolute(struct evdev_device *device, struct input_event *e)
 		evdev_process_absolute_motion(device, e);
 	}
 }
-
+/*
+static int
+is_sync_report_event(struct input_event *event)
+{
+	return (event->type == EV_SYN) && (event->code == SYN_REPORT);
+}
+*/
 static int
 is_motion_event(struct input_event *e)
 {
@@ -308,7 +335,7 @@ fallback_process(struct evdev_dispatch *dispatch,
 		evdev_process_key(device, event, time);
 		break;
 	case EV_SYN:
-		device->pending_events |= EVDEV_SYN;
+		evdev_process_syn(device, event, time);
 		break;
 	}
 }
@@ -336,6 +363,206 @@ fallback_dispatch_create(void)
 	return dispatch;
 }
 
+
+static FILE *evlog_stream = NULL;
+static unsigned int evlog_stream_cnt = 0;
+
+
+void ioctl_dump_char(struct evdev_device *d, char *tag, char *map, size_t nbytes)
+{
+	if (evlog_stream == NULL)
+		return;
+
+	fprintf(evlog_stream, "IOCTLDUMP: %p %s %zu ", d, tag, nbytes);
+	size_t i;
+	for (i = 0; i < nbytes; i++) {
+		fprintf(evlog_stream, "%02x ", (unsigned char)map[i]);
+	}
+	fprintf(evlog_stream, "\n");
+}
+
+void ioctl_dump_long(struct evdev_device *d, char *tag, unsigned long *map, size_t n)
+{
+	ioctl_dump_char(d, tag, (char *) map, n * sizeof(unsigned long));
+}
+
+static int
+evdev_tx_sync(struct evdev_device *d, unsigned int time)
+{
+	unsigned long kernel_keys[NBITS(KEY_CNT)];
+	int ret;
+
+	memset(kernel_keys, 0, sizeof(kernel_keys));
+	ret = ioctl(d->fd, EVIOCGKEY(KEY_CNT), kernel_keys);
+
+	if (ret < 0)
+		return -1;
+
+	ioctl_dump_long(d,  "evdev_keys", kernel_keys, NBITS(KEY_CNT));
+
+
+	return 0;
+}
+
+static void
+syn_drop_process(struct evdev_dispatch *dispatch,
+		 struct evdev_device *device,
+		 struct input_event *event,
+		 uint32_t time)
+{
+	if ((event->code != EV_SYN) || (event->code != SYN_REPORT))
+		return;
+
+	if (device->dispatch->interface == &syn_drop_interface)
+		device->dispatch->interface = &fallback_interface;
+
+	evdev_tx_sync(device, time);
+}
+
+static void
+syn_drop_destroy(struct evdev_dispatch *dispatch)
+{
+	free(dispatch);
+}
+
+struct evdev_dispatch_interface syn_drop_interface = {
+	syn_drop_process,
+	syn_drop_destroy
+};
+
+static void write_prop(FILE * fp, const unsigned char *mask, int bytes)
+{
+	int i;
+	for (i = 0; i < bytes; i += 8)
+		fprintf(fp, "P: %02x %02x %02x %02x %02x %02x %02x %02x\n",
+			mask[i], mask[i + 1], mask[i + 2], mask[i + 3],
+			mask[i + 4], mask[i + 5], mask[i + 6], mask[i + 7]);
+}
+
+static void write_mask(FILE * fp, int index,
+		       const unsigned char *mask, int bytes)
+{
+	int i;
+	for (i = 0; i < bytes; i += 8)
+		fprintf(fp, "B: %02x %02x %02x %02x %02x %02x %02x %02x %02x\n",
+			index, mask[i], mask[i + 1], mask[i + 2], mask[i + 3],
+			mask[i + 4], mask[i + 5], mask[i + 6], mask[i + 7]);
+}
+
+static void write_abs(FILE *fp, int index, const struct input_absinfo *abs)
+{
+	fprintf(fp, "A: %02x %d %d %d %d\n", index,
+		abs->minimum, abs->maximum, abs->fuzz, abs->flat);
+}
+
+static int evemu_has_event(const struct evemu_device *dev, int type, int code)
+{
+	return (dev->mask[type][code >> 3] >> (code & 7)) & 1;
+}
+
+static int evemu_write(const struct evemu_device *dev, FILE *fp)
+{
+	int i;
+
+	fprintf(fp, "N: %s\n", dev->name);
+
+	fprintf(fp, "I: %04x %04x %04x %04x\n",
+		dev->id.bustype, dev->id.vendor,
+		dev->id.product, dev->id.version);
+
+	write_prop(fp, dev->prop, dev->pbytes);
+
+	for (i = 0; i < EV_CNT; i++)
+		write_mask(fp, i, dev->mask[i], dev->mbytes[i]);
+
+	for (i = 0; i < ABS_CNT; i++)
+		if (evemu_has_event(dev, EV_ABS, i))
+			write_abs(fp, i, &dev->abs[i]);
+
+	return 0;
+}
+
+
+static int evemu_write_event(FILE *fp, const struct input_event *ev)
+{
+	return fprintf(fp, "E: %lu.%06u %04x %04x %d\n",
+		       ev->time.tv_sec, (unsigned)ev->time.tv_usec,
+		       ev->type, ev->code, ev->value);
+}
+
+static void
+evdev_log_events(struct evdev_device *device,
+		     struct input_event *ev, int count)
+{
+	struct input_event *e, *end;
+
+	if (device->dump.out == NULL)
+		return;
+
+	e = ev;
+	end = e + count;
+	for (e = ev; e < end; e++) {
+		evemu_write_event(device->dump.out, e);
+	}
+
+}
+
+static int evemu_syscall_ioctl(int fd, int type, void* code)
+{
+	int ret;
+	while (((ret = ioctl(fd, type, code)) == -1) && (errno == EINTR));
+	return ret;
+}
+
+static void copy_bits(unsigned char *mask, const unsigned long *bits, int bytes)
+{
+	int i;
+	for (i = 0; i < bytes; i++) {
+		int pos = 8 * (i % sizeof(long));
+		mask[i] = (bits[i / sizeof(long)] >> pos) & 0xff;
+	}
+}
+
+static int evemu_extract(struct evemu_device *dev, int fd)
+{
+	unsigned long bits[64];
+	int rc, i;
+
+	memset(dev, 0, sizeof(*dev));
+
+	rc = evemu_syscall_ioctl(fd, EVIOCGNAME(sizeof(dev->name)), dev->name);
+	if (rc < 0)
+		return rc;
+
+	rc = evemu_syscall_ioctl(fd, EVIOCGID, &dev->id);
+	if (rc < 0)
+		return rc;
+
+	rc = evemu_syscall_ioctl(fd, EVIOCGPROP(sizeof(bits)), bits);
+	if (rc >= 0) {
+		copy_bits(dev->prop, bits, rc);
+		dev->pbytes = rc;
+	}
+
+	for (i = 0; i < EV_CNT; i++) {
+		rc = evemu_syscall_ioctl(fd, EVIOCGBIT(i, sizeof(bits)), bits);
+		if (rc < 0)
+			continue;
+		copy_bits(dev->mask[i], bits, rc);
+		dev->mbytes[i] = rc;
+	}
+
+	for (i = 0; i < ABS_CNT; i++) {
+		if (!evemu_has_event(dev, EV_ABS, i))
+			continue;
+		rc = evemu_syscall_ioctl(fd, EVIOCGABS(i), &dev->abs[i]);
+		if (rc < 0)
+			return rc;
+	}
+
+	return 0;
+}
+
 static void
 evdev_process_events(struct evdev_device *device,
 		     struct input_event *ev, int count)
@@ -391,6 +618,17 @@ evdev_device_data(int fd, uint32_t mask, void *data)
 			return 1;
 		}
 
+		unsigned long ev_cnt = len / sizeof ev[0];
+
+		if (evlog_stream) {
+			fprintf(evlog_stream, "EnewBURST: %5u %lu.%06ld %p %lu \n",
+				device->dump.evlog_burstseq,
+				ev[0].time.tv_sec, ev[0].time.tv_usec, device, ev_cnt);
+			evdev_log_events(device, ev, ev_cnt);
+
+			device->dump.evlog_burstseq++;
+		}
+
 		evdev_process_events(device, ev, len / sizeof ev[0]);
 
 	} while (len > 0);
@@ -414,19 +652,23 @@ evdev_handle_device(struct evdev_device *device)
 	device->caps = 0;
 
 	ioctl(device->fd, EVIOCGBIT(0, sizeof(ev_bits)), ev_bits);
+	ioctl_dump_long(device, "ev_bits", ev_bits, NBITS(EV_MAX));
 	if (TEST_BIT(ev_bits, EV_ABS)) {
 		has_abs = 1;
 
 		ioctl(device->fd, EVIOCGBIT(EV_ABS, sizeof(abs_bits)),
 		      abs_bits);
+		ioctl_dump_long(device, "abs_bits", abs_bits, NBITS(ABS_MAX));
 		if (TEST_BIT(abs_bits, ABS_X)) {
 			ioctl(device->fd, EVIOCGABS(ABS_X), &absinfo);
+			ioctl_dump_char(device, "eviocgabs_abs_x", (char *)&absinfo, sizeof absinfo);
 			device->abs.min_x = absinfo.minimum;
 			device->abs.max_x = absinfo.maximum;
 			device->caps |= EVDEV_MOTION_ABS;
 		}
 		if (TEST_BIT(abs_bits, ABS_Y)) {
 			ioctl(device->fd, EVIOCGABS(ABS_Y), &absinfo);
+			ioctl_dump_char(device, "eviocgabs_abs_y", (char *)&absinfo, sizeof absinfo);
 			device->abs.min_y = absinfo.minimum;
 			device->abs.max_y = absinfo.maximum;
 			device->caps |= EVDEV_MOTION_ABS;
@@ -434,10 +676,12 @@ evdev_handle_device(struct evdev_device *device)
 		if (TEST_BIT(abs_bits, ABS_MT_SLOT)) {
 			ioctl(device->fd, EVIOCGABS(ABS_MT_POSITION_X),
 			      &absinfo);
+			ioctl_dump_char(device, "eviocgabs_abs_mt_pos_x", (char *)&absinfo, sizeof absinfo);
 			device->abs.min_x = absinfo.minimum;
 			device->abs.max_x = absinfo.maximum;
 			ioctl(device->fd, EVIOCGABS(ABS_MT_POSITION_Y),
 			      &absinfo);
+			ioctl_dump_char(device, "eviocgabs_abs_mt_pos_y", (char *)&absinfo, sizeof absinfo);
 			device->abs.min_y = absinfo.minimum;
 			device->abs.max_y = absinfo.maximum;
 			device->is_mt = 1;
@@ -448,6 +692,7 @@ evdev_handle_device(struct evdev_device *device)
 	if (TEST_BIT(ev_bits, EV_REL)) {
 		ioctl(device->fd, EVIOCGBIT(EV_REL, sizeof(rel_bits)),
 		      rel_bits);
+			ioctl_dump_long(device, "rel_bits", rel_bits, NBITS(REL_MAX));
 		if (TEST_BIT(rel_bits, REL_X) || TEST_BIT(rel_bits, REL_Y))
 			device->caps |= EVDEV_MOTION_REL;
 	}
@@ -455,6 +700,7 @@ evdev_handle_device(struct evdev_device *device)
 		has_key = 1;
 		ioctl(device->fd, EVIOCGBIT(EV_KEY, sizeof(key_bits)),
 		      key_bits);
+			ioctl_dump_long(device, "key_bits", key_bits, NBITS(KEY_MAX));
 		if (TEST_BIT(key_bits, BTN_TOOL_FINGER) &&
 		    !TEST_BIT(key_bits, BTN_TOOL_PEN) &&
 		    has_abs)
@@ -518,6 +764,55 @@ evdev_configure_device(struct evdev_device *device)
 	return 0;
 }
 
+static void ininit_logging(struct evdev_device *device, int device_fd)
+{
+	if (evlog_stream == NULL) {
+		char fname[128] = {0};
+		unsigned int ftest_id = rand();
+		sprintf(fname, "/tmp/ftestcase%u.txt", ftest_id);
+		evlog_stream = fopen(fname, "w");
+		if (NULL != evlog_stream)
+			fprintf(evlog_stream, "FAKESTONTESTCASEFORMAT 2\n");
+	}
+}
+
+static void doinit_logging(struct evdev_device *device, int device_fd)
+{
+	if (evlog_stream != NULL) {
+		char ename[128] = {0};
+		char dname[128] = {0};
+		device->dump.emu_file_id = rand();
+		device->dump.emu_desc_id = device_fd;
+		device->dump.evlog_burstseq = 0;
+		setvbuf(evlog_stream, NULL, _IOLBF, 256);
+		sprintf(ename, "/tmp/evemucase%u.txt", device->dump.emu_file_id);
+		sprintf(dname, "/tmp/evemudesc%u.txt", device->dump.emu_desc_id);
+		device->dump.out = fopen(ename, "w");
+		device->dump.dsc = fopen(dname, "w");
+	}
+
+	if (device->dump.dsc != NULL) {
+		struct evemu_device dev;
+		dev.version = 0x00010000;
+
+		fprintf(evlog_stream, "Edesc: %p evemudesc%u.txt\n",
+			device, device->dump.emu_desc_id);
+
+		if (0 == evemu_extract(&dev, device_fd)) {
+			evemu_write(&dev, device->dump.dsc);
+		}
+		fclose(device->dump.dsc);
+		device->dump.dsc = NULL;
+	}
+
+	if (device->dump.out != NULL) {
+		evlog_stream_cnt++;
+		setvbuf(device->dump.out, NULL, _IOLBF, 256);
+		fprintf(evlog_stream, "Erecd: %p evemucase%u.txt\n",
+			device, device->dump.emu_file_id);
+	}
+}
+
 struct evdev_device *
 evdev_device_create(struct weston_seat *seat, const char *path, int device_fd)
 {
@@ -530,6 +825,11 @@ evdev_device_create(struct weston_seat *seat, const char *path, int device_fd)
 		return NULL;
 	memset(device, 0, sizeof *device);
 
+	ininit_logging(device, device_fd);
+	if (evlog_stream)
+		fprintf(evlog_stream, "EprepareDEV: %p %p\n", device, seat);
+	doinit_logging(device, device_fd);
+
 	ec = seat->compositor;
 	device->output =
 		container_of(ec->output_list.next, struct weston_output, link);
@@ -576,11 +876,14 @@ evdev_device_create(struct weston_seat *seat, const char *path, int device_fd)
 	if (device->source == NULL)
 		goto err2;
 
+	fprintf(evlog_stream, "EcreateDEV: %p\n", device);
+
 	return device;
 
 err2:
 	device->dispatch->interface->destroy(device->dispatch);
 err1:
+	fprintf(evlog_stream, "EdestroyDEV: %p\n", device);
 	free(device->devname);
 	free(device->devnode);
 	free(device);
@@ -604,6 +907,19 @@ evdev_device_destroy(struct evdev_device *device)
 	free(device->devname);
 	free(device->devnode);
 	free(device);
+
+	if (evlog_stream) {
+		fprintf(evlog_stream, "EdestroyDEV: %p\n", device);
+		evlog_stream_cnt--;
+		if (evlog_stream_cnt == 0) {
+			fflush(evlog_stream);
+		}
+	}
+
+	if (device->dump.out) {
+		fclose(device->dump.out);
+		device->dump.out = NULL;
+	}
 }
 
 void
diff --git a/src/evdev.h b/src/evdev.h
index eb5c868..6273099 100644
--- a/src/evdev.h
+++ b/src/evdev.h
@@ -45,6 +45,14 @@ enum evdev_device_capability {
 	EVDEV_TOUCH = (1 << 4),
 };
 
+struct fakeston_elog {
+	FILE* out;
+	FILE* dsc;
+	unsigned int emu_file_id;
+	unsigned int emu_desc_id;
+	unsigned int evlog_burstseq;
+};
+
 struct evdev_device {
 	struct weston_seat *seat;
 	struct wl_list link;
@@ -77,6 +85,8 @@ struct evdev_device {
 	enum evdev_device_capability caps;
 
 	int is_mt;
+
+	struct fakeston_elog dump;
 };
 
 /* copied from udev/extras/input_id/input_id.c */
@@ -124,4 +134,7 @@ void
 evdev_notify_keyboard_focus(struct weston_seat *seat,
 			    struct wl_list *evdev_devices);
 
+void ioctl_dump_char(struct evdev_device *d, char *tag, char *map, size_t nbytes);
+void ioctl_dump_long(struct evdev_device *d, char *tag, unsigned long *map, size_t n);
+
 #endif /* EVDEV_H */
-- 
1.7.10.4

